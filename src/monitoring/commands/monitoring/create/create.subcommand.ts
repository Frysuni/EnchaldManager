import { SlashCommandPipe } from "@discord-nestjs/common";
import { Handler, IA, On, SubCommand } from "@discord-nestjs/core";
import { ActionRowBuilder, ButtonBuilder, ButtonStyle, ChatInputCommandInteraction, Colors, EmbedBuilder, Events, Interaction, InteractionReplyOptions } from "discord.js";
import { MonitoringRecordStatusEnum } from "~/monitoring/enums/monitoringRecordStatus.enum";
import { VersionEnum } from "~/monitoring/enums/version.enum";
import { MonitoringService } from "~/monitoring/monitoring.service";
import { convertMinutesToOffset, convertOffsetToMinutes } from "~/monitoring/utils";
import { CreateDto } from "./create.dto";

const confirmButtonCustomIdConstant = 'commands.monitoring.create.confirm';
const  cancelButtonCustomIdConstant = 'commands.monitoring.create.cancel';

const timezoneUtcOffsetRegex = /^(-1[0-2]|0\d|\+1[0-4]):(00|15|30|45)$/;
const addressRegex           = /^(?:[\w-]+\.)+[\w-]{2,}(?::\d+)?|(?:\d{1,3}\.){3}\d{1,3}(?::\d+)?$/i;
const cronRegex              = /^(\*|[0-9-\/]+)\s+(\*|[0-9-\/]+)\s+(\*|[0-9-\/]+)\s+(\*|[0-9-\/]+)\s+(\*|[0-9-\/]+)(\s+(\*|[0-9-\/]+))?$/;

const reply = (content: string): InteractionReplyOptions => ({ content, ephemeral: true });

@SubCommand({
  name: 'create',
  nameLocalizations: { ru: '—Å–æ–∑–¥–∞—Ç—å' },
  description: 'Create a new monitoring and send it to this channel.',
  descriptionLocalizations: { ru: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.' },
})

export class CreateSubcommand {
  constructor(
    private readonly monitoringService: MonitoringService,
  ) {}

  @Handler()
  async handler(
    @IA(SlashCommandPipe) options: CreateDto,
    @IA() interaction: ChatInputCommandInteraction
  ): Promise<InteractionReplyOptions> {

    console.log(options);

    if (!cronRegex.test(options.restartStartCron)) {
      return reply('–í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å https://crontab.guru/'); }
    if (!cronRegex.test(options.backupStartCron)) {
      return reply('–í—Ä–µ–º—è –±–µ–∫–∞–ø–∞ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å https://crontab.guru/'); }
    if (!addressRegex.test(options.address)) {
      return reply('–ê–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.'); }
    if (options.timezoneUtcOffset && !timezoneUtcOffsetRegex.test(options.timezoneUtcOffset)) {
      return reply('–°–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. https://en.wikipedia.org/wiki/List_of_UTC_offsets'); }

    let timezoneUtcOffset = new Date().getTimezoneOffset();
    if (options.timezoneUtcOffset) timezoneUtcOffset = convertOffsetToMinutes(options.timezoneUtcOffset);

    const address = options.address.split(':');
    const record = await this.monitoringService.createMonitoring({
      serverName:         options.serverName,
      token:              options.token,
      version:            options.version,
      address:            address[0],
      port:               address[1] ? Number(address[1]) : 25565,
      restartStartCron:   options.restartStartCron,
      backupStartCron:    options.backupStartCron,
      backupDurationTime: options.backupDurationTime,
      hiddenPlayers:      options.hiddenPlayers ?? '',
      updateInterval:     options.updateInterval ?? 60,
      timezoneUtcOffset:  timezoneUtcOffset,
      channelId:          interaction.channelId,
    });

    const confirmationEmbed = new EmbedBuilder()
      .setAuthor({ name: `IID: ${record.id}` }) // It's not a mistake, just trust me
      .setColor(Colors.Fuchsia)
      .setFields({
        name: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:',
        value:
          `–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞:               **\`${record.serverName}\`**\n` +
          `–¢–æ–∫–µ–Ω:                     **\`${record.token.slice(0, 4)}...${record.token.slice(-4)}\`**\n` +
          `–í–µ—Ä—Å–∏—è:                    **\`${VersionEnum[record.version]}\`**\n` +
          `–ê–¥—Ä–µ—Å:                     **\`${record.address}\`**\n` +
          `–ü–æ—Ä—Ç:                      **\`${record.port}\`**\n` +
          `Cron –Ω–∞—á–∞–ª–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞:      **\`${record.restartStartCron}\`**\n` +
          `Cron –Ω–∞—á–∞–ª–∞ –±—ç–∫–∞–ø–∞:        **\`${record.backupStartCron}\`**\n` +
          `–í—Ä–µ–º—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞: **\`${record.backupDurationTime}\`**\n` +
          `–°–∫—Ä—ã—Ç—ã–µ –∏–≥—Ä–æ–∫–∏:                ${record.hiddenPlayers.split(',').map(nick => `\`${nick}\``).join(' ')}\n` +
          `–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:       **\`${record.updateInterval}\`**\n` +
          `–°–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:   **\`${convertMinutesToOffset(record.timezoneUtcOffset)}\`** **\`(${record.timezoneUtcOffset})\`**`,
      })
      .setFooter({ text: '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–±—ã—Ö –∏–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫, –Ω–æ —Ç–æ–Ω–∫–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–µ –±—ã–ª–∏. –ë–æ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!' });
      console.log(confirmationEmbed.data.fields?.[0].value);
    const buttonsRow = new ActionRowBuilder<ButtonBuilder>()
      .setComponents(
        new ButtonBuilder()
          .setCustomId(confirmButtonCustomIdConstant)
          .setStyle(ButtonStyle.Success)
          .setEmoji('‚úÖ')
          .setLabel('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'),
        new ButtonBuilder()
          .setCustomId(cancelButtonCustomIdConstant)
          .setStyle(ButtonStyle.Danger)
          .setEmoji('üõë')
          .setLabel('–û—Ç–º–µ–Ω–∏—Ç—å'),
      );

    return {
      ephemeral: true,
      embeds: [confirmationEmbed],
      components: [buttonsRow],
    };
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
  @On(Events.InteractionCreate)
  public async postCreateMonitoringCommandConfirmationButtonHandler(@IA() interaction: Interaction): Promise<InteractionReplyOptions | void> {
    if (!interaction.isButton()) return;
    if (interaction.customId !== confirmButtonCustomIdConstant) return;

    const iid = Number(interaction.message.embeds[0].author?.name.split(' ')[1]);

    const status = await this.monitoringService.getMonitoringRecordStatus(iid);
    if (status === MonitoringRecordStatusEnum.Confirmed) return { content: '–≠—Ç–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.', ephemeral: true };
    if (status === MonitoringRecordStatusEnum.Cancelled) return { content: '–≠—Ç–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.', ephemeral: true };

    const embed = new EmbedBuilder().setDescription('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω, –∏–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

    interaction.message.channel.send({ embeds: [embed] }).then(message => {
      this.monitoringService.confirmMonitring(iid, message.id);
    });

    return { content: `–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ IID: ${iid} –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–∏–∑–æ–≤–¥—Å—Ç–≤–æ.`, ephemeral: true };
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å
  @On(Events.InteractionCreate)
  public async postCreateMonitoringCommandCancellationButtonHandler(@IA() interaction: Interaction): Promise<InteractionReplyOptions | void> {
    if (!interaction.isButton()) return;
    if (interaction.customId !== cancelButtonCustomIdConstant) return;

    const iid = Number(interaction.message.embeds[0].author?.name.split(' ')[1]);

    const status = await this.monitoringService.getMonitoringRecordStatus(iid);
    if (status === MonitoringRecordStatusEnum.Confirmed) return { content: '–≠—Ç–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.', ephemeral: true };
    if (status === MonitoringRecordStatusEnum.Cancelled) return { content: '–≠—Ç–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.', ephemeral: true };

    this.monitoringService.cancelMonitoring(iid);

    return { content: `–ü–æ–Ω—è–ª —Ç–µ–±—è, —ç—Ç–æ –≤—ã–±—Ä–æ—Å–∏–ª –≤ –º—É—Å–æ—Ä–∫—É. –°–ø–∞—Å–∏–±–æ.`, ephemeral: true };
  }

}